<script>
import { app } from "../firebase/client";
import {
  getAuth,
  connectAuthEmulator,
  createUserWithEmailAndPassword,
  signOut,
  signInWithEmailAndPassword,
  onAuthStateChanged,
} from "firebase/auth";
import { getAnalytics } from "firebase/analytics";
import { getPerformance } from "firebase/performance";
import {
  getFirestore,
  doc,
  setDoc,
  getDoc,
  updateDoc,
  connectFirestoreEmulator,
} from "firebase/firestore";
import {
  getFunctions,
  httpsCallable,
  connectFunctionsEmulator,
} from "firebase/functions";
import {
  getStripePayments,
  getCurrentUserSubscriptions,
  createCheckoutSession,
} from "@stripe/firestore-stripe-payments";

const analytics = getAnalytics(app);
const auth = getAuth(app);
const perf = getPerformance(app);
const db = getFirestore(app);
const functions = getFunctions(app, "europe-west1");

window.loginWithDiscord = () => {
  const clientId = "963382206443704342";
  const redirectUri = `${window.location.origin}/discord`;
  const scope = "role_connections.write identify guilds.join";
  const state = auth.currentUser.uid;
  const url = `https://discord.com/api/oauth2/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=code&scope=${scope}&state=${state}&prompt=consent`;
  document.cookie = `clientState=${state}; max-age=${1000 * 60 * 5};`;
  window.location.href = url;
};

if (process.env.NODE_ENV === "development") {
  console.log("Development mode: Emulators enabled");
  connectAuthEmulator(auth, "http://127.0.0.1:9099");
  connectFirestoreEmulator(db, "localhost", 8080);
  connectFunctionsEmulator(functions, "localhost", 5001);
}

const signupForm = document.querySelector<HTMLFormElement>('.signup');
if (signupForm) {
  signupForm.addEventListener('submit', (e) => {
    e.preventDefault();

    const email = signupForm.email.value;
    const password = signupForm.password.value;

    if (signupForm.terms.checked) {
      createUserWithEmailAndPassword(auth, email, password)
        .then((cred) => {
          if (process.env.NODE_ENV === "development") {
          console.log('user created:', cred.user);
          }
          signupForm.reset();

          // if callback not in the URL
          if (window.location.href.indexOf("callback") === -1) {
            window.location.href = 'index.html';
          }
        })
        .catch((err) => {
          console.log(err.message);
          alert(err.message);
        });
    } else {
      alert('Please agree to the terms and conditions');
    }
  });
}

const logoutButtons = document.querySelectorAll<HTMLAnchorElement>('.logout');
logoutButtons.forEach((logoutButton) => {
  logoutButton.addEventListener('click', (e) => {
    e.preventDefault();
    signOut(auth).then(() => {
      console.log('user signed out');
      window.location.href = 'index.html';

      if (localStorage.getItem("avatar")) {
        localStorage.removeItem("avatar");
      }
    });
  });
});

const loginForm = document.querySelector<HTMLFormElement>('.login');
if (loginForm) {
  loginForm.addEventListener('submit', (e) => {
    e.preventDefault();

    const email = loginForm.email.value;
    const password = loginForm.password.value;

    signInWithEmailAndPassword(auth, email, password)
      .then((cred) => {
        loginForm.reset();

        if (window.location.href.indexOf("callback") === -1) {
          window.location.href = 'index.html';
        }
      })
      .catch((err) => {
        console.log(err.message);
        alert(err.message);
      });
  });
}

onAuthStateChanged(auth, (user) => {
  const signupelement = document.getElementsByClassName("depth-1")[4] as HTMLDivElement;
  const dashboardelement = document.getElementsByClassName("depth-1")[5] as HTMLDivElement;
  const discordelement = document.getElementsByClassName("depth-1")[6] as HTMLDivElement;
  const logoutelement = document.getElementsByClassName("depth-1")[7] as HTMLDivElement;

  if (user) {
    if (process.env.NODE_ENV === "development") {
      console.log('user logged in:', user);
          }


    if (document.querySelector('.logout')) {
      const logoutElements = document.querySelectorAll('.logout');
      logoutElements.forEach((element) => {
        (element as HTMLElement).style.display = 'inline-block';
      });
    }

    if (document.querySelector('.dashboard')) {
      const dashboardElements = document.querySelectorAll('.dashboard');
      dashboardElements.forEach((element) => {
        (element as HTMLElement).style.display = 'inline-block';
      });
    }

    if (signupelement) {
      signupelement.parentNode?.removeChild(signupelement);
    }

    if (discordelement) {
      discordelement.addEventListener('click', (e) => {
        e.preventDefault();
        loginWithDiscord();
      });
    }

    if (logoutelement) {
      logoutelement.addEventListener('click', (e) => {
        e.preventDefault();
        signOut(auth).then(() => {
          console.log('user signed out');
          window.location.href = 'index.html';

          if (localStorage.getItem("avatar")) {
            localStorage.removeItem("avatar");
          }
        });
      });
    }
  } else {
    console.log('user logged out');

    if (document.querySelector('.sign-up')) {
      const signUpElements = document.querySelectorAll('.sign-up');
      signUpElements.forEach((element) => {
        (element as HTMLElement).style.display = 'inline-block';
      });
    }

    if (logoutelement) {
      logoutelement.parentNode?.removeChild(logoutelement);
    }

    if (discordelement) {
      discordelement.parentNode?.removeChild(discordelement);
    }

    if (dashboardelement) {
      dashboardelement.parentNode?.removeChild(dashboardelement);
    }
  }

  if (user) {
    const docRef = doc(db, "users", user.uid);

    getDoc(doc(db, "users", auth.currentUser?.uid || "")).then((doc) => {
      if (doc.exists()) {
        if (doc.data()?.discord) {
          if (process.env.NODE_ENV === "development") {
            console.log("Document data:", doc.data());
          }

          if (document.querySelector('.discord')) {
            const discordElements = document.querySelectorAll('.discord');
            discordElements.forEach((element) => {
              (element as HTMLElement).style.display = 'none';
            });
          }

          if (discordelement) {
            discordelement.parentNode?.removeChild(discordelement);
          }
        } else {
          console.log("No such document!");

          if (document.querySelector('.discord')) {
            const discordElements = document.querySelectorAll('.discord');
            discordElements.forEach((element) => {
              (element as HTMLElement).style.display = 'inline-block';
            });
          }
        }
      }
    }).catch((error) => {
      console.log("Error getting document:", error);
    });
  }
});

if (window.location.href.includes("discord") && !window.location.href.includes("code=") && !window.location.href.includes("callback=")) {
  onAuthStateChanged(auth, (user) => {
    if (user) {
      const docRef = doc(db, "users", user.uid);

      getDoc(doc(db, "users", auth.currentUser?.uid || "")).then((doc) => {
        if (doc.exists()) {
          if (doc.data()?.discord) {
            getCurrentUserSubscriptions(payments).then((subscriptions) => {
              const id = doc.data()?.discord?.id;
              const tokens = doc.data()?.discord?.tokens;

              if (subscriptions.length > 0) {
                if (subscriptions[0].role === "starter") {
                  const metadata = {
                    isstarter: 1,
                  };
                  pushMetadata({ userId: id, tokens: tokens, metadata: metadata });
                }
                if (subscriptions[0].role === "classic") {
                  const metadata = {
                    isclassic: 1,
                  };
                  pushMetadata({ userId: id, tokens: tokens, metadata: metadata });
                }
                if (subscriptions[0].role === "pro") {
                  const metadata = {
                    ispro: 1,
                  };
                  pushMetadata({ userId: id, tokens: tokens, metadata: metadata });
                }
              } else {
                const metadata = {
                  isregistered: 1,
                };
                pushMetadata({ userId: id, tokens: tokens, metadata: metadata });
                console.log(metadata);
              }
            });
            window.location.href = "dashboard.html";
          } else {
            loginWithDiscord();
          }
        }
      });
    } else {
      const userLang = navigator.language || navigator.userLanguage;

      if (userLang.includes("fr")) {
        window.location.href = "inscription";
      }
      if (userLang.includes("en")) {
        window.location.href = "signup";
      }
      if (userLang.includes("pl")) {
        window.location.href = "rejestracja";
      } else {
        window.location.href = "signup?callback=discord";
      }
    }
  });
}

const confirmLoginWithDiscord = httpsCallable(functions, "confirmLoginWithDiscord");
const pushMetadata = httpsCallable(functions, "pushMetadata");
const getMetadata = httpsCallable(functions, "getMetadata");
if (new URLSearchParams(window.location.search).get("code")) {
  confirmLoginWithDiscord({ code: new URLSearchParams(window.location.search).get("code"), origin: window.location.origin, state: new URLSearchParams(window.location.search).get("state") })
    .then((result) => {
      const data = result.data;
      const { id, username, discriminator, avatar, tokens } = data;
      console.log(id, username, discriminator, avatar, tokens)
        setDoc(doc(db, "users", auth.currentUser.uid), {
          discord: {
            id: id,
            username: username,
            discriminator: discriminator,
            avatar: avatar,
            tokens: tokens,
        }
      }, { merge: true })
        .then(() => {
          console.log("Document successfully written!");
          getCurrentUserSubscriptions(payments).then((subscriptions) => {
            // set the metadata
            if (subscriptions.length > 0) {
              if (subscriptions[0].role === "starter") {
                // set the metadata
                const metadata = {
                  isstarter: 1,
                };
                pushMetadata({ userId: id, tokens: tokens, metadata: metadata })
              }
              if (subscriptions[0].role === "classic") {
                // set the metadata
                const metadata = {
                  isclassic: 1,
                };
                pushMetadata({ userId: id, tokens: tokens, metadata: metadata })
              }
              if (subscriptions[0].role === "pro") {
                // set the metadata
                const metadata = {
                  ispro: 1,
                };
                pushMetadata({ userId: id, tokens: tokens, metadata: metadata })
              }
            }
            else {
              const metadata = {
                isregistered: 1,
              };
              pushMetadata({ userId: id, tokens: tokens, metadata: metadata })
            }
            window.location.href = "dashboard.html";
            
        })})
    .catch((error) => {
      console.error("Error writing document: ", error);
    }
  );
    })
  }


const handleWebhookEvents  = httpsCallable(functions, "ext-firestore-stripe-payments-handleWebhookEvents");

if (localStorage.getItem("avatar")) {
  document.querySelectorAll('[id=avatar]').forEach(element => {
    element.src = localStorage.getItem("avatar");
  });
}
else {
  onAuthStateChanged(auth, (user) => {
  if (user) {
    const userDocRef = doc(db, 'users', auth.currentUser!.uid);
    getDoc(userDocRef).then((userDoc) => {
      if (userDoc.exists()) {
        const userData = userDoc.data();
        if (userData && userData.discord) {
          const discordId = userData.discord.id;
          const discordAvatar = userData.discord.avatar;
          const avatarUrl = `https://cdn.discordapp.com/avatars/${discordId}/${discordAvatar}.png?size=256`;

          const avatarElements = document.querySelectorAll('[id=avatar]');
          avatarElements.forEach((element) => {
            element.setAttribute('src', avatarUrl);
          });

          localStorage.setItem('avatar', avatarUrl);
        }
      }
    });
  }
});
}


var avatarLink = document.getElementById("avatar-link");
var userMenu = document.getElementById("user-menu");

if (avatarLink) {
avatarLink.addEventListener("click", function() {
    userMenu.style.display = "block";
});
document.addEventListener('click', function(event) {
  if (!event.target.closest('#user-container')) {
      userMenu.style.display = 'none';
  }
});
avatarLink.addEventListener("touchstart", function() {
    userMenu.style.display = "block";
}
);
}

const payments = getStripePayments(app, {
  productsCollection: "products",
  customersCollection: "users",
});

// Listen to the button
document.querySelectorAll(".buybutton").forEach((button) => {
  button.addEventListener("click", async () => {
    const user = auth.currentUser;
    if (user) {
  await createCheckoutSession(payments, {
    success_url: window.location.origin + "/dashboard",
    cancel_url: window.location.origin + "/pricing",
    price: `${button.id}`,
  })
.then((session) => {
          window.location.href = session.url;
        })
    }
    else {
      window.location = document.querySelector(".sign-up a").href;
    }
  });
});

// list current subscriptions
onAuthStateChanged(auth, async (user) => {
  if (user) {
    getCurrentUserSubscriptions(payments).then((subscriptions) => {
      subscriptions.forEach((subscription) => {
        console.log(subscription.role);
        if (document.querySelector(".user-info")) {
          document.querySelector(".user-info").style.display = "block";
          document.querySelector(".email").innerHTML = user.email;
          document.querySelector(".subscription").innerHTML = subscription.role.toUpperCase();
          document.querySelector(".managebutton").style.display = "block";
        }
      const docRef = doc(db, "users", auth.currentUser.uid);
      getDoc(doc(db, "users", auth.currentUser.uid)).then((doc) => {
        if (doc.exists()) {
          if (doc.data().vintedbot) {
            document.querySelector(".vintedbot-info").style.display = "block";
            document.querySelector(".vintedbot-subsleft").innerHTML = 'Available channels: ' + doc.data().vintedbot.subs_left;
            const channelids = Object.keys(doc.data().vintedbot.channels);
            channelids.forEach((channelid, index) => {
              const channelurltext = doc.data().vintedbot.channels[channelid].url;
              const channelElement = `
              <li class="vintedbot-channel">
              <div class="vintedbot-channel-text-and-buttons">
                <button class="vintedbot-channel-expand-button">▶️</button>  
                <div class="vintedbot-channel-text">Channel ${index + 1}</div>
                <button class="vintedbot-channel-edit-button">✏️</button>
              </div>
              <div class="vintedbot-channel-url" style="display: none;">${channelurltext}</div>
              </li>
              `;
              document.querySelector(".vintedbot-channels").innerHTML += channelElement;
              
              const expandButtons = document.querySelectorAll(".vintedbot-channel-expand-button");
              expandButtons.forEach((expandButton) => {
                expandButton.addEventListener("click", () => {
                  const channelUrl = expandButton.parentElement.parentElement.querySelector(".vintedbot-channel-url");
                  if (channelUrl.style.display === "none") {             
                    channelUrl.style.display = "block";
                    expandButton.innerHTML = "🔽";
                  } else {
                    channelUrl.style.display = "none";
                    expandButton.innerHTML = "▶️";
                  }
                });
              });
              const editButtons = document.querySelectorAll(".vintedbot-channel-edit-button");
              editButtons.forEach((editButton) => {
                editButton.addEventListener("click", () => {
                  const channelUrl = editButton.parentElement.parentElement.querySelector(".vintedbot-channel-url");
                  const channelUrlInput = document.createElement("input");
                  channelUrlInput.value = channelUrl.textContent;
                  channelUrlInput.type = "text";
                  channelUrlInput.classList.add("vintedbot-channel-url-input");
                  channelUrl.innerHTML = "";
                  channelUrl.appendChild(channelUrlInput);
                  channelUrl.style.display = "block";
              
                  const enterButton = document.createElement("button");
                  enterButton.textContent = "Enter";
                  enterButton.classList.add("vintedbot-enter-button");
                  channelUrl.appendChild(enterButton);
              
                  enterButton.addEventListener("click", async () => {
                    const newUrl = channelUrlInput.value;
                    channelUrl.innerHTML = newUrl;
                    channelUrl.style.display = "none";
              
                    const channelId = channelids[index];
                    const newChannel = {
                      url: newUrl,
                    };
                    await updateDoc(docRef, { [`vintedbot.channels.${channelId}`]: newChannel })
                  });
                });
              });
            });
          }
        }
      });
    });
  });
}
});


</script>